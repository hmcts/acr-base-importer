#
## Import new image on base image update
##
name: ACR base image import 
trigger:
  - master
pr: none
schedules:
- cron: '0 1 * * *'
  displayName: Daily build
  branches:
    include:
    - master
  always: 'true'
variables:
  acrName: hmctspublic
  targetRegistry: hmctspublic.azurecr.io
  keyvaultName: 'infra-vault-prod'
  serviceConnection: 'DCD-CNP-PROD'
  keyvaultNameStg: 'cftapps-stg'
  serviceConnectionStg: 'DCD-CFTAPPS-STG'
  neuvectorController: 'https://cft-neuvector01-api.aat.platform.hmcts.net'

jobs:
- job: ImportBaseImages
  pool:
    name: hmcts-cftptl-agent-pool
  strategy:
    maxParallel: 5
    matrix:
      openjdk-21-distroless:
        baseImage: distroless/java21-debian12
        baseRegistry: gcr.io
        baseTag: latest
        targetImage: imported/distroless/java21
      openjdk-21-debug-distroless:
        baseImage: distroless/java21-debian12
        baseRegistry: gcr.io
        baseTag: debug
        targetImage: imported/distroless/java21
      openjdk-17-distroless:
        baseImage: distroless/java17-debian12
        baseRegistry: gcr.io
        baseTag: latest
        targetImage: imported/distroless/java17
      openjdk-17-debug-distroless:
        baseImage: distroless/java17-debian12
        baseRegistry: gcr.io
        baseTag: debug
        targetImage: imported/distroless/java17

  steps:
  - task: AzureKeyVault@1
    displayName: 'Get secrets from Keyvault'
    inputs:
      azureSubscription: $(serviceConnection)
      keyVaultName: $(keyvaultName)
      secretsFilter: 'registry-public-username,registry-public-password,registry-slack-webhook'
  
  - task: AzureKeyVault@1
    displayName: 'Get secrets from Keyvault'
    inputs:
      azureSubscription: $(serviceConnectionStg)
      keyVaultName: $(keyvaultNameStg)
      secretsFilter: 'neuvector-admin-username,neuvector-new-admin-password'
  
  - task: AzureCLI@1
    displayName: 'Check base registry if new digest available for tag'
    inputs:
      azureSubscription: $(serviceConnection)
      scriptLocation: 'scriptPath'
      scriptPath: check-base-tag.sh
      arguments: |
        --baseImage "$(baseImage)" --baseRegistry "$(baseRegistry)" --baseTag "$(baseTag)" --targetImage "$(targetImage)" --acrName "$(acrName)"

  - task: AzureCLI@1
    displayName: 'Import docker image'
    condition: eq(variables['newTagFound'], 'true')
    inputs:
      azureSubscription: $(serviceConnection)
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "Importing $(baseRegistry)/$(baseImage):$(baseTag) as $(targetImage):$(baseTag)-$(baseDigest) ..."
        az acr import --force --name $(acrName) --source $(baseRegistry)/$(baseImage):$(baseTag) --image $(targetImage):$(baseTag)-$(baseDigest) 

  - task: AzureCLI@1
    displayName: 'Security scan new image'
    condition: eq(variables['newTagFound'], 'true')
    inputs:
      azureSubscription: $(serviceConnection)
      scriptLocation: 'scriptPath'
      scriptPath: base-image-scan.sh
      arguments: |
        --targetRegistry "$(targetRegistry)" --targetImage "$(targetImage)" --baseTag "$(baseTag)-$(baseDigest)" --registryPublicUsername "$(registry-public-username)" --registryPublicPassword "$(registry-public-password)" --registrySlackWebhook "$(registry-slack-webhook)" --scannerUrl "$(neuvectorController)" --scannerUsername "$(neuvector-admin-username)" --scannerPassword "$(neuvector-new-admin-password)"

  - task: AzureCLI@1
    displayName: 'Re-tag new image using the base tag'
    condition: and(eq(variables['newTagFound'], 'true'), eq(variables['scanPassed'], 'true'))
    inputs:
      azureSubscription: $(serviceConnection)
      scriptLocation: 'scriptPath'
      scriptPath: tag-new-image.sh
      arguments: |
        --baseTag "$(baseTag)" --targetImage "$(targetImage)" --acrName "$(acrName)" --targetRegistry "$(targetRegistry)" --baseDigest "$(baseDigest)" --acrDigest "$(acrDigest)" 

- job: CreateACRCache
  pool:
    vmImage: ubuntu-latest
  steps:
    - task: AzureCLI@1
      displayName: 'Create ACR Cache'
      inputs:
        azureSubscription: $(serviceConnection)
        scriptLocation: 'scriptPath'
        scriptPath: acr-cache.sh
